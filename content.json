{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com"},"pages":[],"posts":[{"title":"时间与空间复杂度","slug":"时间与空间复杂度","date":"2022-06-17T05:55:25.000Z","updated":"2022-06-17T05:56:01.913Z","comments":true,"path":"2022/06/17/时间与空间复杂度/","link":"","permalink":"http://example.com/2022/06/17/%E6%97%B6%E9%97%B4%E4%B8%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/","excerpt":"","text":"时间复杂度时间维度：是指执行当前算法所消耗的时间，我们通常用「时间复杂度」来描述。 大O「 大O符号表示法 」，即 T(n) &#x3D; O(f(n))。 其中 n 表示数据规模 ，O(f(n))表示运行算法所需要执行的指令数，和f(n)成正比。 常见的时间复杂度量级 常数阶O(1) 线性阶O(n) 平方阶O(n²) 对数阶O(logn) 线性对数阶O(nlogn) ![[Pasted image 20220114174550.png]] 递归算法的时间复杂度如果递归函数中，只进行一次递归调用，递归深度为depth；在每个递归的函数中，时间复杂度为T；则总体的时间复杂度为O(T * depth)。 归并排序 与 快速排序 都带有递归的思想，并且时间复杂度都是O(nlogn) ，但并不是有递归的函数就一定是 O(nlogn) 级别的。从递归中进行一次递归调用的复杂度分析、递归中进行多次递归调用的复杂度分析。 具体举例分析 最好、最坏情况时间复杂度最好、最坏情况时间复杂度指的是特殊情况下的时间复杂度。 当数组中第一个元素就是要找的 x 时，时间复杂度是 O(1)；而当最后一个元素才是 x 时，时间复杂度则是 O(n)。 最好情况时间复杂度就是在最理想情况下执行代码的时间复杂度，它的时间是最短的；最坏情况时间复杂度就是在最糟糕情况下执行代码的时间复杂度，它的时间是最长的。 平均情况时间复杂度最好、最坏时间复杂度反应的是极端条件下的复杂度，发生的概率不大，不能代表平均水平。那么为了更好的表示平均情况下的算法复杂度，就需要引入平均时间复杂度。 平均情况时间复杂度可用代码在所有可能情况下执行次数的加权平均值表示。 还是以 find 函数为例，从概率的角度看， x 在数组中每一个位置的可能性是相同的，为 1 &#x2F; n。那么，那么平均情况时间复杂度就可以用下面的方式计算： ((1 + 2 + … + n) &#x2F; n + n) &#x2F; 2 &#x3D; (3n + 1) &#x2F; 4 find 函数的平均时间复杂度为 O(n)。 123456789int find(int[] array, int n, int x) &#123; for ( int i = 0 ; i &lt; n; i++) &#123; if (array[i] == x) &#123; return i; break; &#125; &#125; return -1; &#125; 均摊复杂度分析一个相对比较耗时的操作，如果能保证它不会每次都被触发，那么这个相对比较耗时的操作，它所相应的时间是可以分摊到其它的操作中来的。 空间复杂度空间维度：是指执行当前算法需要占用多少内存空间，我们通常用「空间复杂度」来描述。 一个程序的空间复杂度是指运行完一个程序所需内存的大小。利用程序的空间复杂度，可以对程序的运行所需要的内存多少有个预先估计。一个程序执行时除了需要存储空间和存储本身所使用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为现实计算所需信息的辅助空间。程序执行时所需存储空间包括以下两部分： 固定部分，这部分空间的大小与输入&#x2F;输出的数据的个数多少、数值无关。主要包括指令空间（即代码空间）、数据空间（常量、简单变量）等所占的空间。这部分属于静态空间。 可变空间，这部分空间的主要包括动态分配的空间，以及递归栈所需的空间等。这部分的空间大小与算法有关。 一个算法所需的存储空间用f(n)表示。S(n)&#x3D;O(f(n))，其中n为问题的规模，S(n)表示空间复杂度。 空间复杂度可以理解为除了原始序列大小的内存，在算法过程中用到的额外的存储空间。 平衡二叉树如果二叉树的是以红黑树等平衡二叉树实现的，则 n 个节点的二叉排序树的高度为 log2n+1 ，其查找效率为O(Log2n)，近似于折半查找。 列表二叉树如果二叉树退变为列表了，则 n 个节点的高度或者说是长度变为了n，查找效率为O(n)，变成了顺序查找。 一般二叉树介于「列表二叉树」与「平衡二叉树」之间，查找性能也在O(Log2n)到O(n)之间。 时间与空间对于一个算法，其时间复杂度和空间复杂度往往是相互影响的。 比如说，要判断某某年是不是闰年： 可以编写一个算法来计算，这也就意味着，每次给一个年份，都是要通过计算得到是否是闰年的结果。 还有另一个办法就是，事先建立一个有 5555 个元素的数组（年数比现实多就行），然后把所有的年份按下标的数字对应，如果是闰年，此数组项的值就是1，如果不是值为0。这样，所谓的判断某一年是否是闰年，就变成了查找这个数组的某一项的值是多少的问题。此时，我们的运算是最小化了，但是硬盘上或者内存中需要存储这 5555 个 0 和 1 。这就是典型的使用空间换时间的概念。 当追求一个较好的时间复杂度时，可能会使空间复杂度的性能变差，即可能导致占用较多的存储空间；反之，求一个较好的空间复杂度时，可能会使时间复杂度的性能变差，即可能导致占用较长的运行时间。 另外，算法的所有性能之间都存在着或多或少的相互影响。因此，当设计一个算法(特别是大型算法)时，要综合考虑算法的各项性能，算法的使用频率，算法处理的数据量的大小，算法描述语言的特性，算法运行的机器系统环境等各方面因素，才能够设计出比较好的算法。","raw":null,"content":null,"categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-06-14T06:34:04.851Z","updated":"2022-06-14T06:34:04.855Z","comments":true,"path":"2022/06/14/hello-world/","link":"","permalink":"http://example.com/2022/06/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","raw":null,"content":null,"categories":[],"tags":[]}]}